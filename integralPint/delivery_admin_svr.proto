syntax = "proto3"; 
//package code generated by Rick  DO NOT EDIT.
package   trpc.vap_oteam.delivery_admin_svr;

//code generated by Rick  DO NOT EDIT.
option  java_package="com.tencent.trpcprotocol.vap_oteam.delivery_admin_svr.delivery_admin_svr";
option  java_multiple_files = false; 
option  java_outer_classname  = "deliveryAdminSvr"; 
//code generated by Rick  DO NOT EDIT.
option  go_package ="git.code.oa.com/trpcprotocol/vap_oteam/delivery_admin_svr";

// 建议使用谷歌protobuf规范 遵循PB语法检查 
// 谷歌protobuf规范地址：https://developers.google.com/protocol-buffers/docs/style
// Proto格式检查（Tencent）包含：Google protobuf规范和数据校验检查 

// 不建议使用 google/protobuf/any.proto 
// any强依赖package type.googleapis.com/_packagename_._messagename_.   
// https://developers.google.com/protocol-buffers/docs/proto3#any 

// tRPC-Go数据校验模块（**移除注释使用**） 
// tsecstr仅允许中英文字母、数字、=、+、/、@、#、_、-传入。注意，字符集不包括空格、|等符号，如有需要，请自定义校验表达式。
// 详参见规则手册：https://iwiki.woa.com/pages/viewpage.action?pageId=241919333  
import "prm.proto";

enum ErrorCode {
    OK = 0;
    PARAMS = 10001; // 参数错误
    NET = 10002; // 下游服务网络错误
    ORDERID = 10003; // 订单ID重复
    REPEATED = 10004; // 奖励已领取或无该奖励
    LIMITED = 10005; // 被限频
    LOGIC = 10006; // 正常逻辑错误
    
    
    // prm相关
    CREATE_PRODUCT = 20001;             // 创建物品失败
    CREATE_ACTIVITY = 20002;            // 创建活动失败
    PRM_PRESENT = 20003;                // prm发货
    GET_ACTIVITY = 20004;               // 查询活动失败
    GET_BUDGET_INFO = 20005;            // 查询预算单列表失败
    REVIWER_ACTIVITY = 20006;           // 活动提交审批失败
    PUBLISH_ACTIVITY = 20007;           //  发布活动规则失败
    PUBLISH_SUPPLEMENT_RESOURCE = 20008;// 发布追加活动资源失败
    QUERY_ACT_USAGE = 20009;            // 查询活动下礼包的消耗量失败
    RELEASE_RECALL = 20010;             // 回收未发放礼包失败
    SUPPLEMENT_RESOURCE = 20011;        // 发布追加活动资源失败
    UPDATE_ACTIVITY = 20012;            // 更新活动规则失败
    UPDATE_ONLINE_ACTIVITY = 20013;     // 更新现网活动规则失败
    UNDER_REVIEW_ACTIVITY = 20014;      // 活动提交审批失败
    
    // 支付网关相关
    GET_POINT_ERR = 20101;  // 拉积分失败
    UPDATE_POINT_ERR = 20102;   // 更新积分失败
}


// 活动运营平台调用的prm的B侧接口
service PrmAdminSvr {
    // 创建PRM物品
    rpc CreateProduct(vap_oteam.common.CreateProductReq) returns (vap_oteam.common.CreateProductRsp);
    // 创建PRM活动
    rpc CreateActivity(vap_oteam.common.CreateActivityReq) returns (vap_oteam.common.CreateActivityRsp); 
    // 创建只有一个礼包的活动，返回活动ID和礼包ID
    rpc CreateSinglePackageActivity(vap_oteam.common.CreateActivityReq) returns (CreateSinglePackageActivityRsp); 
    // 查询PRM活动
    rpc GetActivity(vap_oteam.common.GetActivityReq) returns (vap_oteam.common.GetActivityRsp);
    // 查询预算单列表
    rpc GetBudgetInfoList(vap_oteam.common.GetBudgetInfoListReq) returns (vap_oteam.common.GetBudgetInfoListRsp);
    // 活动提交审批
    rpc UnderReviewActivitySource(vap_oteam.common.UnderReviewActivityResourceReq) returns (vap_oteam.common.UnderReviewActivityResourceRsp);
    // 发布活动规则
    rpc PublishActivityResource(vap_oteam.common.PublishActivityResourceReq) returns (vap_oteam.common.PublishActivityResourceRsp);
    // 更新现网活动规则
    rpc UpdateOnlineActivity(vap_oteam.common.UpdateOnlineActivityReq) returns (vap_oteam.common.UpdateOnlineActivityRsp);
    // 更新活动规则
    rpc UpdateActivity(vap_oteam.common.UpdateActivityReq) returns (vap_oteam.common.UpdateActivityRsp);
    // 追加活动资源
    rpc SupplementActivityResource(vap_oteam.common.SupplementActivityResourceReq) returns (vap_oteam.common.SupplementActivityResourceRsp);
    // 回收未发放礼包
    rpc ReleaseRecall(vap_oteam.common.ReleaseRecallReq) returns (vap_oteam.common.ReleaseRecallRsp);
    // 查询活动下礼包的消耗量
    rpc QueryActUsage(vap_oteam.common.QueryActUsageReq) returns (vap_oteam.common.QueryActUsageRsp);
    // 发布追加活动资源
    rpc PublishSupplementActivityResource(vap_oteam.common.PublishSupplementActivityResourceReq) returns (vap_oteam.common.PublishSupplementActivityResourceRsp);
    
}

service PaySecProxySvr {
    // GetPoint 获取通用积分
    rpc GetPoint (GetPointReq) returns (GetPointRsp);
    // UpdatePoint 更新通用积分
    rpc UpdatePoint (UpdatePointReq) returns (UpdatePointRsp);
}

message GetPointReq {
    string actid = 1;   //业务id,活动上线前在中台申请
    string point_id = 2; //积分id,活动上线前在中台申请
    string uid = 3;      //业务用户id
}
message GetPointRsp {
  uint64 balance = 1;  //积分余额
  uint64 save_sum = 2;  //历史累计总积分
  string expire_info = 3; // 过期信息 格式例子『JiFen:202203=0=10』，表示2022年3月，充值积分0，赠送积分10
}


//更新通用积分余额
message UpdatePointReq {
  string actid = 1;   //业务id,活动上线前在中台申请
  string point_id = 2; //积分id,活动上线前在中台申请
  string uid = 3;      //业务用户id
  string billno = 4; //订单号
  int64 amt = 5 ;                    //积分数量,正数增加,负数扣除
  string operator = 6;  // 操作人的rtx
}
message UpdatePointRsp {
  uint64 balance = 1;  //积分余额
  string billno = 2;   //订单号
}

message CreateSinglePackageActivityRsp {
    string act_id = 1;       // prm活动ID
    string package_id = 2;  // prm礼包id
}

